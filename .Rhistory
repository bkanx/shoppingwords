load_dataset("phrases")
load_dataset("stopwords_tr")
load_dataset("corrected_words")
data("corrected_words", package = "shoppingwords")
head(corrected_words)
usethis::use_data(corrected_words, overwrite = TRUE)
load_dataset("corrected_words")
str(corrected_words)
load_dataset("corrected_words")
dene <- load_dataset("corrected_words")
dene
str(dene)
data("corrected_words", package = "shoppingwords")
head(corrected_words)
load_dataset <- function(dataset_name) {
# Ensure the input is a string
if (!is.character(dataset_name)) stop("Dataset name must be a character string.")
# Load dataset from package environment
data(list = dataset_name, package = "shoppingwords")
# Retrieve dataset
dataset <- get(dataset_name, envir = .GlobalEnv)
# Ensure correct structure
if (!is.data.frame(dataset)) {
stop("Loaded dataset is not a data frame.")
}
return(dataset)
}
load_dataset("corrected_words")
# Load the dataset manually
load("data/corrected_words.rda")
# Check its structure
str(corrected_words)
load("data/corrected_words.rda")
file.exists("data/corrected_words.rda")
load("data/phrases.rda")
data("corrected_words", package = "shoppingwords")
print(corrected_words)
dim(corrected_words)  # Should return rows and columns
# Reshape corrected_words so words are stored as rows, not columns
corrected_words_fixed <- data.frame(words = as.vector(t(corrected_words)))
# Check the new structure (should be multiple rows, 1 column)
dim(corrected_words_fixed)  # Should return many rows, 1 column
usethis::use_data(corrected_words_fixed, overwrite = TRUE)
usethis::use_data(corrected_words, overwrite = TRUE)
data("corrected_words_fixed")
data("corrected_words")
dim(corrected_words_fixed)  # Should return (10137, 1)
data("corrected_words_fixed", package = "shoppingwords")
head(corrected_words_fixed)
corrected_words
library(readr)
read_csv("/Users/mac/Documents/GitHub/datasets-Githuba_yedekle_June6/corrected_words.csv")
reno <- read_csv("/Users/mac/Documents/GitHub/datasets-Githuba_yedekle_June6/corrected_words.csv")
class(reno)
library(readr)
library(tidyr)
# Read CSV properly
corrected_words <- read_csv("/Users/mac/Documents/GitHub/datasets-Githuba_yedekle_June6/corrected_words.csv", col_names = FALSE)
# Reshape: Convert columns into rows
corrected_words_fixed <- corrected_words %>%
pivot_longer(cols = everything(), names_to = "word_id", values_to = "word")
# Check structure
dim(corrected_words_fixed)  # Should return (10137, 2)
head(corrected_words_fixed)
library(jsonlite)
# Read the JSON file properly
corrected_words <- fromJSON("/Users/mac/Documents/GitHub/datasets-Githuba_yedekle_June6/corrected_words.json")
head(corrected_words)
corrected_words_fixed <- as.data.frame(corrected_words)
# Ensure it's stored as rows, not columns
corrected_words_fixed <- data.frame(words = unlist(corrected_words))
head(corrected_words_fixed)
usethis::use_data(corrected_words_fixed, overwrite = TRUE)
data("corrected_words_fixed", package = "shoppingwords")
head(corrected_words_fixed)
library(shoppingwords)
data("corrected_words")
data("corrected_words_fixed")
data("corrected_words_fixed.rda")
data("reviews.rda")
data("reviews", package = "shoppingwords")
head(reviews)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(shoppingwords)
data("reviews", package = "shoppingwords")
head(reviews)
data("testdata", package = "shoppingwords")
head(reviews)
data("corrected_words", package = "shoppingwords")
head(reviews)
data("corrected_words", package = "shoppingwords")
head(corrected_words)
# Load and view each dataset properly
library(shoppingwords)
# 1. Reviews dataset
data("reviews", package = "shoppingwords")
head(reviews)  # Shows reviews
# 2. Testdata dataset
data("testdata", package = "shoppingwords")
head(testdata)  # Now shows testdata (not reviews!)
# 3. Corrected words dataset
data("corrected_words", package = "shoppingwords")
head(corrected_words)  # Shows corrected_words
data(package = "shoppingwords")
devtools::document()
devtools::install()
data(package = "shoppingwords")
corrected_words <- corrected_words_fixed  # Rename back to original
usethis::use_data(corrected_words, overwrite = TRUE)
data(package = "shoppingwords")
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(shoppingwords)
data(package = "shoppingwords")
# Load and view each dataset properly
library(shoppingwords)
# 1. Reviews dataset
data("reviews", package = "shoppingwords")
head(reviews)  # Shows reviews
# 2. Testdata dataset
data("testdata", package = "shoppingwords")
head(testdata)  # Now shows testdata (not reviews!)
# 3. Corrected words dataset
data("corrected_words", package = "shoppingwords")
head(corrected_words)  # Shows corrected_words
# Load and view each dataset properly
library(shoppingwords)
# 1. Reviews dataset
data("reviews", package = "shoppingwords")
head(reviews)  # Shows reviews
# 2. Testdata dataset
data("testdata", package = "shoppingwords")
head(testdata)  # Now shows testdata (not reviews!)
# 3. Corrected words dataset
data("corrected_words", package = "shoppingwords")
head(corrected_words)  # Shows corrected_words
# 4. Phrases dataset
data("phrases", package = "shoppingwords")
head(phrases)  # Shows corrected_words
# 5. stopwords_tr dataset
data("stopwords_tr", package = "shoppingwords")
head(stopwords_tr)  # Shows corrected_words
#'
#' The function converts text to a standardized format by removing accents and special characters,
#' transforming it into basic Latin characters, and making all letters lowercase. It then
#' tokenizes the text, filters out stopwords, and returns the cleaned version.
#' @param df Dataframe containing user reviews, with required columns `"text"` (comments) and `"rating"` (numerical score).
#' @return A modified dataframe with an additional `"cleaned_text"` column containing stopword-free text.
#' @import stringi
#' @importFrom stringdist amatch
#' @import stopwords
#' @export
match_stopwords <- function(df) {
# Load stopwords
data("stopwords_tr", package = "shoppingwords")  # Loads stopwords_tr.rda
stopwords_tr <- stopwords_tr$stopwords_all  # Extract the column
stopwords_tr <- as.character(stopwords_tr)  # Convert to a standard character vector
stopwords_iso <- stopwords::stopwords("tr", source = "stopwords-iso")
# Ensure text column exists
if (!"text" %in% colnames(df) || !"rating" %in% colnames(df)) {
stop("Dataframe must have 'comment' and 'rating' columns.")
}
# Function to clean individual text
clean_text <- function(text) {
if (is.na(text) || text == "") return("")
text <- tolower(text)
text_clean <- stringi::stri_trans_general(text, "Latin-ASCII")
words <- unlist(strsplit(text_clean, "\\s+"))
cleaned_words <- words[!words %in% stopwords_tr & !words %in% stopwords_iso]
return(paste(cleaned_words, collapse = " "))
}
# Apply cleaning function to all rows
df$cleaned_text <- sapply(df$comment, clean_text)
return(df)
}
match_stopwords(reviews)
names(reviews)
colnames(reviews)
class(reviews)
df <- reviews
print(head(df$comment))  # Verify text column exists
match_stopwords <- function(df) {
# Standardize column names to remove formatting issues
colnames(df) <- trimws(tolower(colnames(df)))
# Debugging check: Print recognized column names inside the function
print(colnames(df))
# Ensure required columns exist
if (!all(c("comment", "rating") %in% colnames(df))) {
stop("Dataframe must have 'comment' and 'rating' columns.")
}
# Load stopwords
data("stopwords_tr", package = "shoppingwords")
stopwords_iso <- stopwords::stopwords("tr", source = "stopwords-iso")
# Clean text function
clean_text <- function(text) {
if (is.na(text) || text == "") return("")
text <- tolower(text)
text_clean <- stringi::stri_trans_general(text, "Latin-ASCII")
words <- unlist(strsplit(text_clean, "\\s+"))
cleaned_words <- words[!words %in% stopwords_tr & !words %in% stopwords_iso]
return(paste(cleaned_words, collapse = " "))
}
# Apply cleaning function
df$cleaned_text <- sapply(df$comment, clean_text)
return(df)
}
match_stopwords(reviews)
reviews <- data("reviews", package = "shoppingwords")
reviews_sample <- reviews[1002:1005,]
str(reviews )
data("reviews", package = "shoppingwords")
head(reviews)
reviews <- data("reviews", package = "shoppingwords")
class(reviews)
data("reviews", package = "shoppingwords")  # Loads the dataset into the environment
reviews_sample <- reviews[1002:1005, ]  # Should work now!
match_stopwords(reviews_sample)
clss(reviews)
class(reviews)
match_stopwords(stopwords_tr)
data("stopwords_tr", package="shoppingwords")
head(stopwords_tr)
get(stopwords_tr)
match_stopwords("reviews")
match_stopwords(stopwords_tr)
data("reviews", package = "shoppingwords")  # Load dataset
head(reviews)  # Verify that "comment" and "rating" columns exist
print(class(reviews))  # Should return "data.frame"
print(colnames(reviews))  # Should include "comment" and "rating"
head(reviews)  # Preview data
df <- reviews
print(all(c("comment", "rating") %in% colnames(df)))
match_stopwords <- function(df) {
# Print detected column names inside the function
print("Column names inside function:")
print(colnames(df))
# Ensure required columns exist
if (!all(c("comment", "rating") %in% colnames(df))) {
stop("Dataframe must have 'comment' and 'rating' columns.")
}
# Load stopwords
data("stopwords_tr", package = "shoppingwords")
stopwords_iso <- stopwords::stopwords("tr", source = "stopwords-iso")
# Clean text function
clean_text <- function(text) {
if (is.na(text) || text == "") return("")
text <- tolower(text)
text_clean <- stringi::stri_trans_general(text, "Latin-ASCII")
words <- unlist(strsplit(text_clean, "\\s+"))
cleaned_words <- words[!words %in% stopwords_tr & !words %in% stopwords_iso]
return(paste(cleaned_words, collapse = " "))
}
# Apply function
df$cleaned_text <- sapply(df$comment, clean_text)
return(df)
}
match_stopwords(reviews)
match_stopwords(reviews_sample)
rmarkdown::render("shoppingwords_tutorial.Rmd")
file.exists("shoppingwords_tutorial.Rmd")
getwd()
file.exists("/Users/mac/Documents/GitHub/shoppingwords/shoppingwords_tutorial.Rmd")
data("corrected_words", package = "shoppingwords")
head(corrected_words)
data("corrected_words", package = "shoppingwords")  # Load dataset into environment
corrected_words <- get("corrected_words")  # Explicitly retrieve it as a data frame
head(corrected_words)
data("corrected_words", package = "shoppingwords")
head(corrected_words)  # This should work
devtools::clean_dll()
devtools::clean_dll()
unlink("data/*.rda")  # Remove old datasets if needed
system("du -sh /Users/mac/Documents/GitHub/shoppingwords")
list.files("data/")
list.files("data/")
data("reviews")
data("reviews", package = "shoppingwords)
head(reviews)
data("reviews", package = "shoppingwords")
head(reviews)
data("corrected_words", package = "shoppingwords")
head(corrected_words)
data("stopwords_tr", package = "shoppingwords")
head(stopwords_tr)
data("phrases", package = "shoppingwords")
head(phrases)
data("testdata", package = "shoppingwords")
head(testdata)
shoppingwords::match_stopwords()
lobstr::mem_used()
library(shoppingwords)
lobstr::mem_used()
invisible(reviews)
lobstr::mem_used()
reviews
invisible(reviews)
lobstr::mem_used()
reviews
library(shoppingwords)
reviews
usethis::use_import_from("utils", "data")
?data
usethis::use_r("data-documentation")
load(reviews)
stopwords_tr <- get("stopwords_tr", envir = asNamespace("shoppingwords"))
stopwords_tr
load(stopwords_tr)
stopwords_tr <- data("stopwords_tr", envir = asNamespace("shoppingwords"))
stopwords_tr <- data("stopwords_tr", envir = "shoppingwords")
stopwords_tr <- data("stopwords_tr", package = "shoppingwords",envir = .GlobalEnv,)
stopwords_tr <- data("stopwords_tr", package = "shoppingwords",envir = .GlobalEnv)
stopwords_tr
stopwords_tr <- data("stopwords_tr", package = "shoppingwords")
stopwords_tr
load("~/Documents/GitHub/shoppingwords/data/stopwords_tr.rda")
stopwords_tr
data("phrases")
data("phrases", package = "shoppingwords")
head(phrases)
data("phrases", package = "shoppingwords")
load("~/Documents/GitHub/shoppingwords/data/phrases.rda")
phrases
#| message: false
library(shoppingwords)
library(knitr)
library(tibble)
library(dplyr)
library(utils)
#| message: false
#| eval: false
# Load reviews from RDA
reviews <- data("reviews", package = "shoppingwords")
reviews
utils::data("reviews", package = "shoppingwords")
reviews
#| message: false
library(shoppingwords)
reviews <- get("reviews", envir = asNamespace("shoppingwords"))
reviews
reviews
reviews <- get("reviews", envir = asNamespace("shoppingwords"))
#| message: false
library(shoppingwords)
reviews <- get("reviews", envir = asNamespace("shoppingwords"))
reviews <- get("reviews", envir = asNamespace("shoppingwords"))
usethis::use_data(reviews)
usethis::use_data(corrected_words)
usethis::use_data(testdata)
usethis::use_data(phrases)
usethis::use_data(stopwords_tr)
usethis::use_data(corrected_words, overwrite = TRUE)
usethis::use_data(testdata, overwrite = TRUE)
usethis::use_data(phrases, overwrite = TRUE)
usethis::use_data(stopwords_tr, overwrite = TRUE)
usethis::use_data(reviews, overwrite = TRUE)
library(shoppingwords)
match_stopwords <- function(df) {
# Load stopwords
get("stopwords_tr", envir = asNamespace("shoppingwords"))  # Loads stopwords_tr.rda
stopwords_tr <- stopwords_tr$stopwords_all  # Extracts the column
stopwords_tr <- as.character(stopwords_tr)  # Converts to a standard character vector
stopwords_iso <- stopwords::stopwords("tr", source = "stopwords-iso")
# Ensure text column exists
if (!"comment" %in% colnames(df) || !"rating" %in% colnames(df)) {
stop("Dataframe must have 'comment' and 'rating' columns.")
}
# Function to clean individual text
clean_text <- function(text) {
if (is.na(text) || text == "") return("")
text <- tolower(text)
text_clean <- stringi::stri_trans_general(text, "Latin-ASCII")
words <- unlist(strsplit(text_clean, "\\s+"))
cleaned_words <- words[!words %in% stopwords_tr & !words %in% stopwords_iso]
return(paste(cleaned_words, collapse = " "))
}
df$cleaned_text <- sapply(df$comment, clean_text)  # Applies cleaning function to all rows
return(df)
}
match_stopwords(reviews)
reviews
reviews_ex <- reviews[1:5,]
match_stopwords(reviews_ex)
#| message: false
#| eval: false
# Load reviews from RDA
get("reviews", envir = asNamespace("shoppingwords"))
head(reviews, 3)
#| message: false
#| eval: false
# Load reviews from RDA
get("reviews")
#| message: false
#| eval: false
# Load reviews from RDA
reviews <- get("reviews")
#head(reviews, 3)
str(reviews)
#| message: false
#| message: false
# Load corrected words from RDA
corrected_words <- load("corrected_words")
readRDS("corrected_words.rda")
load("corrected_words.rda")
load("~/corrected_words.rda")
library(shoppingwords)
load("~/corrected_words.rda")
data("corrected_words", package = "shoppingwords")
print(corrected_words)
corrected_words
#head(reviews, 3)
str(corrected_words)
#head(reviews, 3)
str(reviews)
corrected_words
library(tidyr)
library(dplyr)
data("corrected_words", package = "shoppingwords")
# Convert the wide-format dataset to a tidy format with rows instead of columns
corrected_words <- corrected_words |>
pivot_longer(cols = everything(), names_to = "column_name", values_to = "word")
#| message: false
#| eval: false
# Load reviews from RDA
reviews <- get("reviews")
corrected_words
corrected_words
corrected_words <- corrected_words |>
pivot_longer(cols = everything(), names_to = "corrected", values_to = "word")
corrected_words
get("corrected_words", envir = asNamespace("shoppingwords")
)
load("~/Documents/GitHub/shoppingwords 2/data/corrected_words.rda")
corrected_words
corrected_words |> corrected_words <- corrected_words |>
pivot_longer(cols = everything(), names_to = "word", values_to = "coorected")
corrected_words <- corrected_words |>
pivot_longer(cols = everything(), names_to = "word", values_to = "coorected")
corrected_words
corrected_words <- corrected_words |>
pivot_longer(cols = everything(), names_to = "word", values_to = "corrected")
corrected_words
load("~/Documents/GitHub/shoppingwords 2/data/corrected_words.rda")
corrected_words
corrected_words <- corrected_words |>
pivot_longer(cols = everything(), names_to = "word", values_to = "corrected")
corrected_words
usethis::data("corrected_words.rda")
usethis::data("corrected_words")
usethis::data(corrected_words)
usethis::use_data(corrected_words)
#| message: false
# Load corrected words from RDA
get("corrected_words", envir = asNamespace("shoppingwords"))
#| message: false
# Load corrected words from RDA
get("corrected_words", envir = asNamespace("shoppingwords"))
#| message: false
# Load corrected words from RDA
get("corrected_words", envir = asNamespace("shoppingwords"))[1:3]
#| message: false
# Load corrected words from RDA
get("corrected_words", envir = asNamespace("shoppingwords"))[1:3,]
corrected_words
corrected_words[55,]
corrected_words[56,]
corrected_words[58,]
corrected_words[38,]
corrected_words[28,]
Sys.time()
lobstr::mem_used()
library(shoppingwords)
lobstr::mem_used()
invisible(reviews)
lobstr::mem_used()
library(texttranslate)
install.packages("texttranslate")
library(texttranslate)
install.packages("deeplr")
library(deeplr)
turkish_text <- "Bu fonksiyon, verilen kelimenin durak kelime olup olmadığını kontrol eder."
translated_text <- translate(turkish_text, source = "tr", target = "en")
rlang::last_trace()
library(deeplr)
translate2("Bu bir test cümlesidir.", target_lang = "EN")
available_languages2()
reviews_df %>%
filter(str_detect(comment, "Üstte görünsün diye"))
reviews %>%
filter(str_detect(comment, "Üstte görünsün diye"))
library(dplyr)
reviews %>%
filter(str_detect(comment, "Üstte görünsün diye"))
library(stringr)
reviews %>%
filter(str_detect(comment, "Üstte görünsün diye"))
library(dplyr)
reviews_df %>%
mutate(index = row_number()) %>%
filter(str_detect(comment, "Üstte görünsün diye|Kesinlikle almayınız")) %>%
pull(index)
library(dplyr)
reviews %>%
mutate(index = row_number()) %>%
filter(str_detect(comment, "Üstte görünsün diye|Kesinlikle almayınız")) %>%
pull(index)
