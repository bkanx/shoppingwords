text <- tolower(text)
transfer <- stringi::stri_trans_general(text, "Latin-ASCII") # Converts "göre" → "gore"
transfer_index <- stringdist::amatch(text, stopwords_tr$stopwords_all, method = "lv", maxDist = 1)
transfer_word <- stopwords_tr$stopwords_all[transfer_index]
if (!is.na(transfer_index)) {
return(list(index = transfer_index, transfer_word)) # Return matched word from shoppingwords_tr
} else {
# Fallback to stopwords_iso if no match found
stopwords_iso <- stopwords::stopwords("tr", source = "stopwords-iso")
iso_transfer_index <- stringdist::amatch(transfer, stopwords_iso, method = "lv", maxDist = 1)
iso_transfer_word <- stopwords_iso[iso_transfer_index]
if (!is.na(transfer_index) && !is.null(transfer_word)){
message(sprintf("\n%-30s", "Using shoppingwords_tr \u2192 No match found"))
message(sprintf("\n%-30s", "Using stopwords_iso \u2192 Index Info:"))
return(list(iso_index = iso_transfer_index,iso_transfer_word))  # Return matched word from stopwords_iso
} else {
return(NA) # No match found in either list
}
}
}
text <- "Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre"
cleaned_text <- match_stopwords(text)
print(cleaned_text)
match_stopwords <- function(text) {
# Load stopwords directly from the package
stopwords_tr <- load_stopwords("csv")$stopwords_all
stopwords_iso <- stopwords("tr", source = "stopwords-iso")
# Ensure text isn't empty or NA
if (is.na(text) || text == "") return("")
# Convert text to lowercase and remove accents
text <- tolower(text)
text_clean <- stringi::stri_trans_general(text, "Latin-ASCII") # Converts "göre" → "gore"
# Tokenize words
words <- unlist(strsplit(text_clean, "\\s+"))
# Remove words that match either stopwords list
cleaned_words <- words[!words %in% stopwords_tr & !words %in% stopwords_iso]
# Return cleaned sentence
return(paste(cleaned_words, collapse = " "))
}
text <- "Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre"
cleaned_text <- match_stopwords(text)
install.packages("stopwords")
text <- "Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre"
cleaned_text <- match_stopwords(text)
library(shoppingwords)
text <- "Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre"
cleaned_text <- match_stopwords(text)
install.packages("stopwords")
library(stopwords)
text <- "Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre"
cleaned_text <- match_stopwords(text)
library(shoppingwords)
text <- "Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre"
cleaned_text <- match_stopwords(text)
print(cleaned_text)
match_stopwords_df <- function(df) {
# Load stopwords
stopwords_tr <- load_stopwords("csv")$stopwords_all
stopwords_iso <- stopwords("tr", source = "stopwords-iso")
# Ensure text column exists
if (!"text" %in% colnames(df) || !"rating" %in% colnames(df)) {
stop("Dataframe must have 'text' and 'rating' columns.")
}
# Function to clean individual text
clean_text <- function(text) {
if (is.na(text) || text == "") return("")
text <- tolower(text)
text_clean <- stringi::stri_trans_general(text, "Latin-ASCII")
words <- unlist(strsplit(text_clean, "\\s+"))
cleaned_words <- words[!words %in% stopwords_tr & !words %in% stopwords_iso]
return(paste(cleaned_words, collapse = " "))
}
# Apply cleaning function to all rows
df$cleaned_text <- sapply(df$text, clean_text)
return(df)
}
reviews_data <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre", "Fiyat çok pahalı ama kalite iyi"),
rating = c(4.5, 3.0)
)
cleaned_reviews <- match_stopwords_df(reviews_data)
print(cleaned_reviews)
stopwords_iso
match_stopwords_df("gore")
reviews_data <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre", "Fiyat çok pahalı ama kalite iyi"),
rating = c(4.5, 3.0)
)
cleaned_reviews <- match_stopwords_df(reviews_data)
print(cleaned_reviews)
reviews_data <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre", "Fiyat çok pahalı ama kalite iyi"),
rating = c(4.5, 3.0)
)
cleaned_reviews <- match_stopwords(reviews_data)
remove.packages("shoppingwords")
unlink("/Users/mac/Library/R/arm64/4.4/library/shoppingwords", recursive = TRUE, force = TRUE)
unlink("~/.RData", recursive = TRUE, force = TRUE)
unlink("~/.Rhistory", recursive = TRUE, force = TRUE)
devtools::clean_dll()
devtools::install_github("your_real_username/shoppingwords", force = TRUE)
devtools::install_github("bkanx/shoppingwords", force = TRUE)
library(shoppingwords)
reviews_data <- load_reviews()
(cleaned_reviews <- match_stopwords_df(reviews_data))
(cleaned_reviews <- match_stopwords_df(reviews_data$comment))
remove.packages("shoppingwords")
unlink("/Users/mac/Library/R/arm64/4.4/library/shoppingwords", recursive = TRUE, force = TRUE)
devtools::clean_dll()
devtools::install_github("your_real_username/shoppingwords", force = TRUE)
devtools::install_github("bkanx/shoppingwords", force = TRUE)
library(shoppingwords)
cleaned_reviews <- match_stopwords_df(reviews_data)
#' The function converts text to a standard format by removing accents and special characters,
#' transforming it into basic Latin characters, and making all letters lowercase.
#' This ensures more accurate word comparisons.
#'
#' @param text Character string representing the word to normalize.
#' @return A list containing the matched word and its corresponding index, or `NULL` if no match is found.
#' @import stringi
#' @importFrom stringdist amatch
#' @import stopwords
#' @export
match_stopwords <- function(df) {
# Load stopwords
stopwords_tr <- load_stopwords("csv")$stopwords_all
stopwords_iso <- stopwords("tr", source = "stopwords-iso")
# Ensure text column exists
if (!"comment" %in% colnames(df) || !"rating" %in% colnames(df)) {
stop("Dataframe must have 'text' and 'rating' columns.")
}
# Function to clean individual text
clean_text <- function(text) {
if (is.na(text) || text == "") return("")
text <- tolower(text)
text_clean <- stringi::stri_trans_general(text, "Latin-ASCII")
words <- unlist(strsplit(text_clean, "\\s+"))
cleaned_words <- words[!words %in% stopwords_tr & !words %in% stopwords_iso]
return(paste(cleaned_words, collapse = " "))
}
# Apply cleaning function to all rows
df$cleaned_text <- sapply(df$text, clean_text)
return(df)
}
reviews_data <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre", "Fiyat çok pahalı ama kalite iyi"),
rating = c(4.5, 3.0)
)
cleaned_reviews <- match_stopwords_df(reviews_data)
print(cleaned_reviews)
reviews_data <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı biraz yüksek gibi göre", "Fiyat çok pahalı ama kalite iyi"),
rating = c(4.5, 3.0)
)
cleaned_reviews <- match_stopwords(reviews_data)
colnames(reviews_data)
devtools::install_github("bkanx/shoppingwords")
library(shoppingwords)
devtools::install_github("bkanx/shoppingwords")
library(shoppingwords)
colnames(reviews_data)
reviews_data <- load_reviews()
colnames(reviews_data)
# Example
reviews_sample <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"),
rating = c(4.5, 3.0)
)
(cleaned_reviews <- match_stopwords_df(reviews_sample))
cleaned_reviews
(cleaned_reviews <- match_stopwords_df(reviews_sample))
reviews_data <- load_reviews()
# Example
reviews_sample <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"),
rating = c(4.5, 3.0)
)
(cleaned_reviews <- match_stopwords(reviews_sample))
reviews_data <- load_reviews()
devtools::install_github("bkanx/shoppingwords")
library(shoppingwords)
reviews_data <- load_reviews()
# Example
reviews_sample <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"),
rating = c(4.5, 3.0)
)
(cleaned_reviews <- match_stopwords_df(reviews_sample))
rm(ls=list())
rm(list=ls())
# Example
reviews_sample <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"),
rating = c(4.5, 3.0)
)
reviews_data <- load_reviews()
head(reviews_data )
# Example
reviews_sample <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"),
rating = c(4.5, 3.0)
)
match_stopwords(reviews_sample)
devtools::install_github("bkanx/shoppingwords")
library(shoppingwords)
reviews_data <- load_reviews()
head(reviews_data)
# Example
reviews_sample <- data.frame(
text = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"),
rating = c(4.5, 3.0)
)
match_stopwords(reviews_sample)
cleaned_reviews
(cleaned_reviews <- match_stopwords(reviews_sample))
reviews_sample <- data.frame(
comment = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"), rating = c(4.5, 3.0)
)
(cleaned_reviews <- match_stopwords(reviews_sample))
cleaned_reviews
(cleaned_reviews <- match_stopwords_df(reviews_data))
(cleaned_reviews <- match_stopwords_df(reviews_data))
match_stopwords <- function(df) {
# Load stopwords
stopwords_tr <- load_stopwords("csv")$stopwords_all
stopwords_iso <- stopwords("tr", source = "stopwords-iso")
# Ensure text column exists
if (!"comment" %in% colnames(df) || !"rating" %in% colnames(df)) {
stop("Dataframe must have 'text' and 'rating' columns.")
}
# Function to clean individual text
clean_text <- function(text) {
if (is.na(text) || text == "") return("")
text <- tolower(text)
text_clean <- stringi::stri_trans_general(text, "Latin-ASCII")
words <- unlist(strsplit(text_clean, "\\s+"))
cleaned_words <- words[!words %in% stopwords_tr & !words %in% stopwords_iso]
return(paste(cleaned_words, collapse = " "))
}
# Apply cleaning function to all rows
df$cleaned_text <- sapply(df$text, clean_text)
df <- as_tibble(df)
return(df)
}
# Example
reviews_sample <- data.frame(
comment = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"), rating = c(4.5, 3.0)
)
(cleaned_reviews <- match_stopwords(reviews_sample))
# Example
reviews_sample <- as.tibble(
comment = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"), rating = c(4.5, 3.0)
)
(cleaned_reviews <- match_stopwords(reviews_sample))
cleaned_reviews
(cleaned_reviews <- match_stopwords(reviews_sample))
#' The function converts text to a standard format by removing accents and special characters,
#' transforming it into basic Latin characters, and making all letters lowercase.
#' This ensures more accurate word comparisons.
#'
#' @param text Character string representing the word to normalize.
#' @return A list containing the matched word and its corresponding index, or `NULL` if no match is found.
#' @import stringi
#' @importFrom stringdist amatch
#' @import stopwords
#' @export
match_stopwords <- function(df) {
# Load stopwords
stopwords_tr <- load_stopwords("csv")$stopwords_all
stopwords_iso <- stopwords("tr", source = "stopwords-iso")
# Ensure text column exists
if (!"comment" %in% colnames(df) || !"rating" %in% colnames(df)) {
stop("Dataframe must have 'comment' and 'rating' columns.")
}
# Function to clean individual text
clean_text <- function(text) {
if (is.na(text) || text == "") return("")
text <- tolower(text)
text_clean <- stringi::stri_trans_general(text, "Latin-ASCII")
words <- unlist(strsplit(text_clean, "\\s+"))
cleaned_words <- words[!words %in% stopwords_tr & !words %in% stopwords_iso]
return(paste(cleaned_words, collapse = " "))
}
# Apply cleaning function to all rows
df$cleaned_text <- sapply(df$comment, clean_text)
return(df)
}
reviews_sample <- as.tibble(
comment = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"), rating = c(4.5, 3.0)
)
# Example
library(tidyr)
reviews_sample <- as.tibble(
comment = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"), rating = c(4.5, 3.0)
)
# Example
library(tibble)
reviews_sample <- as.tibble(
comment = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"), rating = c(4.5, 3.0)
)
reviews_sample <- as_tibble(
comment = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"), rating = c(4.5, 3.0)
)
reviews_sample <- as_tibble(
comment = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"), rating = c(4.5, 3.0)
)
reviews_sample <- tibble(
comment = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"), rating = c(4.5, 3.0)
)
(cleaned_reviews <- match_stopwords(reviews_sample))
cleaned_reviews
reviews_data <- as_tibble(load_reviews())
head(cleaned_reviews)
reviews_sample <- tibble(
comment = c("Bu ürün gerçekten çok iyi ancak fiyatı sadece yüksek gibi", "Fiyat çok pahalı ama kaliteli iyi"), rating = c(4.5, 3.0)
)
(cleaned_sample <- match_stopwords(reviews_sample))
cleaned_sample
library(shoppingwords)
reviews_data <- as_tibble(load_reviews())
head(reviews_data)
install.packages("knitr")
install.packages("knitr")
remove.packages("shoppingwords")
unlink("/Users/mac/Library/R/arm64/4.4/library/shoppingwords", recursive = TRUE, force = TRUE)
unlink("~/.RData", recursive = TRUE, force = TRUE)
unlink("~/.Rhistory", recursive = TRUE, force = TRUE)
devtools::clean_dll()
devtools::install_github("bkanx/shoppingwords", force =TRUE)
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::document()
devtools::check()
library(devtools)
devtools::check()
```{r, message=FALSE}
\VignetteIndexEntry{shoppingwords_tutorial}
install.packages("kablExtra")
library(kablExtra)
install.packages("kableExtra")
library(kableExtra)
corrected_words_json
# Load corrected words as a JSON file
corrected_words_json <- load_corrected_words("json")[1:15]
str(corrected_words_json)
kable(str(corrected_words_json))
load_phrases <- function() {
if (format == "") {
if (file_path == "") stop("ERROR: File does not exist in the package.")
return(readr::read_csv(file_path))
} else {
stop("ERROR: Invalid format. Please choose 'csv'.")
}
}
```{r, message=FALSE}
file.exists(system.file("data", "phrases.csv", package = "shoppingwords"))
file.exists(system.file("extdata", "phrases.csv", package = "shoppingwords"))
devtools::document()
devtools::install()
rm(list = c("load_phrases"))
devtools::load_all()
remove.packages("shoppingwords")
unlink("/Users/mac/Library/R/arm64/4.4/library/shoppingwords", recursive = TRUE, force = TRUE)
devtools::clean_dll()
devtools::install_github("your_username/shoppingwords", force = TRUE)
> devtools::install_github("bkanx/shoppingwords", force = TRUE)
devtools::install_github("bkanx/shoppingwords", force = TRUE)
library(shoppingwords)
devtools::load_all()
remove.packages("shoppingwords")
unlink("/Users/mac/Library/R/arm64/4.4/library/shoppingwords", recursive = TRUE, force = TRUE)
devtools::clean_dll()
devtools::install_github("bkanx/shoppingwords", force = TRUE)
library(shoppingwords)
devtools::load_all()
file.exists(system.file("extdata", "phrases.csv", package = "shoppingwords"))
```{r setup, include=FALSE}
library(shoppingwords)
print(system.file("extdata", "phrases.csv", package = "shoppingwords"))
file.exists(system.file("extdata", "phrases.csv", package = "shoppingwords"))
shopping_phrases <- load_phrases("csv")
shopping_phrases
library(shoppingwords)
shopping_phrases <- load_phrases("csv")
kable(head(shopping_phrases, 10))
library(knitr)
library(shoppingwords)
shopping_phrases <- load_phrases("csv")
kable(head(shopping_phrases, 10))
devtools::document()
devtools::install()
list.files(system.file("extdata", package = "shoppingwords"))
load_phrases <- function(format = "csv") {
if (format == "csv") {
file_path <- system.file("extdata", "phrases.csv", package = "shoppingwords")
# Debugging: Print file path during execution
print(paste("Loading file from:", file_path))
if (file_path == "") stop("ERROR: File does not exist in the package.")
return(readr::read_csv(file_path))
} else {
stop("ERROR: Invalid format. Please choose 'csv'.")
}
}
load_phrases("csv")
load_phrases <- function(format = "csv") {
if (format == "csv") {
file_path <- system.file("extdata", "phrases.csv", package = "shoppingwords")
print(paste("Resolved file path:", file_path))  # Debugging
if (file_path == "") stop("ERROR: File does not exist in the package.")
return(readr::read_csv(file_path))
} else {
stop("ERROR: Invalid format. Please choose 'csv'.")
}
}
load_phrases("csv)
load_phrases("csv")
devtools::document()
devtools::install()
remove.packages("shoppingwords")
unlink("/Users/mac/Library/R/arm64/4.4/library/shoppingwords", recursive = TRUE, force = TRUE)
devtools::clean_dll()
devtools::install_github("bkanx/shoppingwords", force = TRUE)
library(shoppingwords)
remove.packages("shoppingwords")
unlink("/Users/mac/Library/R/arm64/4.4/library/shoppingwords", recursive = TRUE, force = TRUE)
120000/40
load_phrases()
# install.packages("remotes")
remotes::install_github("rjournal/rjtools")
load_corrected_words("json)
library(shoppingwords)
load_corrected_words <- function(format = "csv") {
if (format == "csv") {
file_path <- system.file("extdata/corrected_words_v1_0", "corrected_words_10137.csv", package = "shoppingwords")
if (file_path == "") stop("File does not exist in the package.")
corrected_words_10137 <- readr::read_csv(file_path)
# Pivot data to long format
corrected_words_long <- tidyr::pivot_longer(corrected_words_10137,
cols = tidyselect::everything(),
names_to = "word",
values_to = "corrected_word")
return(corrected_words_long)
} else if (format == "json") {
return(jsonlite::fromJSON(system.file("extdata/corrected_words_v1_0", "corrected_words_10137.json", package = "shoppingwords")))
} else {
stop("Invalid format. Please choose 'csv', 'rds', or 'json'.")
}
}
load_corrected_words("json")
my_data <- read.csv(system.file("datasets", "my_data.csv", package = "mypackage"))
my_data <- read.csv(system.file("datasets", "stopwords.csv", package = "mypackage"))
# Ensure text column exists
if (!"comment" %in% colnames(df) || !"rating" %in% colnames(df)) {
stop("Dataframe must have 'comment' and 'rating' columns.")
}
my_data <- read_csv(system.file("datasets", "stopwords.csv", package = "mypackage"))
library(readr)
reviews <- readRDS("datasets/reviews.rds")
reviews <- readRDS("datasets/reviews_raw_v1.0.rds")
reviews
library(dplyr)
reviews <- reviews |> select(-c(review_id, author, date, product_id))
reviews |> head()
colnames(reviews)
saveRDS(reviews, "")
getwd()
saveRDS(reviews, "/Users/mac/Documents/GitHub/bias/review_raw_v1_1.rds")
reviews <- readRDS("datasets/review_raw_v1_1.rds")
reviews |> head(3)
reviews |> head(250900)
#' Load a Dataset from the Package
#'
#' This function loads datasets from the `datasets/` folder based on user input.
#' Supports `"csv"`, `"json"`, and `"rds"` formats.
#'
#' @param dataset_name The name of the dataset file (e.g., `"reviews"`, `"stopwords"`).
#' @param format The format of the dataset to load (`"csv"`, `"json"`, or `"rds"`).
#'        Default is `"csv"`.
#' @return A data frame or list containing the dataset.
#' @import readr jsonlite tidyr
#' @export
load_dataset <- function(dataset_name, format = "csv") {
# Construct the file name based on user input
filename <- paste0(dataset_name, ".", format)
# Get the full file path
file_path <- system.file("datasets", filename, package = "shoppingwords")
# Check if the file exists
if (file_path == "") stop("File does not exist in the package.")
# Read the file based on format
if (format == "csv") {
data <- readr::read_csv(file_path)
# Reshape CSV data for better analysis
data <- tidyr::pivot_longer(data,
cols = tidyselect::everything(),
names_to = "word",
values_to = "corrected_word")
return(data)
} else if (format == "json") {
return(jsonlite::fromJSON(file_path))
} else if (format == "rds") {
return(readRDS(file_path))
} else {
stop("Invalid format. Please choose 'csv', 'rds', or 'json'.")
}
}
load_dataset("phrases","csv")
library(shoppingwords)
load_dataset("phrases","csv")
usethis::create_package("path/to/your/package")
getwd()
usethis::create_package("/Users/mac/Documents/GitHub/shoppingwords")
