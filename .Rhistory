"üste çıksın diye" = "To appear at the top",
"görünsün diye" = "To be noticed",
"öne çıksın" = "To be highlighted",
"çıksın diye" = "To stand out",
"gözüksün diye" = "To be visible",
"5 yıldız verdim" = "I gave 5 stars"
)
ggplot(testdata_summary, aes(x = factor(rating), y = n, fill = emotion)) +
geom_bar(stat = "identity", position = "dodge") +
scale_x_discrete(labels = translation_map) +  # Replace x labels with translations
scale_fill_manual(values = c("Negative" = "darkred", "Positive" = "lightblue")) +
labs(
title = "Emotion Phrases in Reviews (Turkish & English)",
x = "Rating",
y = "Count",
fill = "Emotion"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Create a mapping of Turkish phrases to English translations
translation_map <- c(
"üste çıksın diye" = "To appear at the top",
"görünsün diye" = "To be noticed",
"öne çıksın" = "To be highlighted",
"çıksın diye" = "To stand out",
"gözüksün diye" = "To be visible",
"5 yıldız verdim" = "I gave 5 stars"
)
# Ensure emotion column has translated labels
testdata_summary <- testdata_summary %>%
mutate(phrase_en = recode(emotion, !!!translation_map))  # Create English version column
# Create the bar plot with both Turkish & English labels
ggplot(testdata_summary, aes(x = factor(rating), y = n, fill = emotion)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = paste(emotion, "\n", phrase_en)), vjust = -0.5, size = 4, color = "black") +  # Labels with Turkish & English
scale_fill_manual(values = c("Negative" = "darkred", "Positive" = "lightblue")) +
labs(
title = "Emotion Phrases in Reviews (Turkish & English)",
x = "Rating",
y = "Count",
fill = "Emotion"
) +
theme_minimal()
# Create a mapping of Turkish phrases to English translations
translation_map <- c(
"üste çıksın diye" = "To appear at the top",
"görünsün diye" = "To be noticed",
"öne çıksın" = "To be highlighted",
"çıksın diye" = "To stand out",
"gözüksün diye" = "To be visible",
"5 yıldız verdim" = "I gave 5 stars"
)
# Add translated phrases to the dataset
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
# Generate the updated bar plot
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "Top Negative Sentiment Phrases in 5-Star Reviews",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
# Create a mapping of Turkish phrases to English translations
translation_map <- c(
"üste çıksın diye" = "To appear at the top",
"görünsün diye" = "To be noticed",
"öne çıksın" = "To be highlighted",
"çıksın diye" = "To stand out",
"gözüksün diye" = "To be visible",
"5 yıldız verdim" = "I gave 5 stars"
)
# Add translated phrases to the dataset
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
# Generate the updated bar plot
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
# Create a mapping of Turkish phrases to English translations
translation_map <- c(
"üste çıksın diye" = "To appear at the top",
"görünsün diye" = "To be noticed",
"öne çıksın" = "To be highlighted",
"çıksın diye" = "To stand out",
"gözüksün diye" = "To be visible",
"5 yıldız verdim" = "I gave 5 stars"
)
# Add translated phrases to the dataset
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
# Generate the updated bar plot
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
# Create a mapping of Turkish phrases to English translations
translation_map <- c(
"üste çıksın diye" = "To appear at the top",
"görünsün diye" = "To be noticed",
"öne çıksın" = "To be highlighted",
"çıksın diye" = "To stand out",
"gözüksün diye" = "To be visible",
"" = "",
"" = "",
"" = "",
"" = ""
)
# Create a mapping of Turkish phrases to English translations
translation_map <- c(
"5 yıldız verdim" = "I gave 5 stars",
"diye 5" = "as 5",
"çıksın diye" = "To stand out",
"görünsün diye" = "To be noticed",
"üste çıksın diye" = "To appear at the top",
"gözüksün diye" = "To be visible",
)
# Create a mapping of Turkish phrases to English translations
translation_map <- c(
"5 yıldız verdim" = "I gave 5 stars",
"diye 5" = "as 5",
"çıksın diye" = "in order to stand out",
"görünsün diye" = "in order to be noticed",
"öne çıksın" = "to be highlighted",
"üste çıksın" = "to be at the top",
"Üste çıksın diye" = "to be at the Top",
"gözüksün diye" = "in order to be visible",
"Öne çıksın diye" = "in order to be Highlighted",
"üste çıksın diye" = "in order to appear at the top"
)
# Add translated phrases to the dataset
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
# Generate the updated bar plot
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
ggplot(phrase_counts, aes(x = reorder(phrase, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(title = "Top Negative Sentiment Phrases in 5-Star Reviews",
x = "Phrase",
y = "Count") +theme_minimal() )
ggplot(phrase_counts, aes(x = reorder(phrase, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(title = "Top Negative Sentiment Phrases in 5-Star Reviews",
x = "Phrase",
y = "Count") +theme_minimal()
ggplot(phrase_counts, aes(x = reorder(phrase, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "Top Negative Sentiment Phrases in 5-Star Reviews",
x = "Phrase",
y = "Count"
) +
theme_minimal()
translation_map <- c(
"5 yıldız verdim" = "I gave 5 stars",
"diye 5" = "as 5",
"çıksın diye" = "in order to appear",
"görünsün diye" = "in order to be noticed",
"öne çıksın" = "to be highlighted",
"üste çıksın" = "to be at the top",
"Üste çıksın diye" = "to be at the Top",
"gözüksün diye" = "in order to be visible",
"Öne çıksın diye" = "in order to be Highlighted",
"üste çıksın diye" = "in order to appear at the top"
)
ggplot(phrase_counts, aes(x = reorder(phrase, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "Top Negative Sentiment Phrases in 5-Star Reviews",
x = "Phrase",
y = "Count"
) +
theme_minimal()
# Add translated phrases to the dataset
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
# Generate the updated bar plot
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
translation_map <- c(
"5 yıldız verdim" = "I gave 5 stars",
"diye 5" = "as 5",
"çıksın diye" = "in order to appear",
"görünsün diye" = "in order to be noticed",
"öne çıksın" = "to be highlighted",
"üste çıksın" = "to be at the top",
"Üste çıksın diye" = "to be at the Top",
"gözüksün diye" = "in order to be visible",
"Öne çıksın diye" = "in order to be Highlighted",
"üste çıksın diye" = "in order to appear at the top"
)
# Add translated phrases to the dataset
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
# Generate the updated bar plot
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
> translation_map <- c(
# Add translated phrases to the dataset
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
# Generate the updated bar plot
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
# Add translated phrases to the dataset
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
# Generate the updated bar plot
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
# Add translated phrases to the dataset
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
# Generate the updated bar plot
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "blue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
translation_map <- c(
"5 yıldız verdim" = "I gave 5 stars",
"diye 5" = "as 5",
"çıksın diye" = "in order to appear",
"görünsün diye" = "in order to be noticed",
"öne çıksın" = "to be highlighted",
"üste çıksın" = "to be at the top",
"Üste çıksın diye" = "in order to be at the Top",
"gözüksün diye" = "in order to be visible",
"Öne çıksın diye" = "in order to be Highlighted",
"üste çıksın diye" = "in order to appear at the top"
)
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
translation_map <- c(
"5 yıldız verdim" = "I gave 5 stars",
"diye 5" = "as 5",
"çıksın diye" = "in order to appear",
"görünsün diye" = "in order to be noticed",
"öne çıksın" = "to be highlighted",
"üste çıksın" =  "…",
"Üste çıksın diye" = "in order to be at the Top",
"gözüksün diye" = "in order to be visible",
"Öne çıksın diye" = "in order to be Highlighted",
"üste çıksın diye" = "in order to appear at the top"
)
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
phrase_counts
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
translation_map <- c(
"5 yıldız verdim" = "I gave 5 stars",
"diye 5" = "as 5",
"çıksın diye" = "in order to appear",
"görünsün diye" = "in order to be noticed",
"öne çıksın" = "to be highlighted",
"üste çıksın" =  "to be at the top",
"Üste çıksın diye" = "in order to be at the Top",
"gözüksün diye" = "in order to be visible",
"Öne çıksın diye" = "in order to be Highlighted",
"üste çıksın diye" = "in order to appear at the top"
)
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
phrase_counts
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
translation_map <- c(
"5 yıldız verdim" = "I gave 5 stars",
"diye 5" = "as 5",
"çıksın diye" = "in order to appear",
"görünsün diye" = "in order to be noticed",
"öne çıksın" = "to be highlighted",
"üste çıksın" =  "to be at the top",
"Üste çıksın diye" = "in order to be at the Top",
"gözüksün diye" = "in order to be visible",
"Öne çıksın diye" = "in order to be Highlighted",
"üste çıksın diye" = "in order to appear at the top"
)
translation_map <- c(
"5 yıldız verdim" = "I gave 5 stars",
"diye 5" = "as 5",
"çıksın diye" = "in order to appear",
"görünsün diye" = "in order to be noticed",
"öne çıksın" = "to be highlighted",
"üste çıksın" =  "To be at the top",
"Üste çıksın diye" = "in order to be at the Top",
"gözüksün diye" = "in order to be visible",
"Öne çıksın diye" = "in order to be Highlighted",
"üste çıksın diye" = "in order to appear at the top"
)
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")")) # Adds English below Turkish
phrase_counts
translation_map <- c(
"5 yıldız verdim" = "I gave 5 stars",
"diye 5" = "as 5",
"çıksın diye" = "in order to appear",
"görünsün diye" = "in order to be noticed",
"öne çıksın" = "to be highlighted",
"üste çıksın" = "to be at the top",
"Üste çıksın" = "To be at the top",  # Correct capitalization
"Üste çıksın diye" = "In order to be at the top",
"gözüksün diye" = "in order to be visible",
"Öne çıksın diye" = "In order to be highlighted",
"üste çıksın diye" = "In order to appear at the top"
)
phrase_counts <- phrase_counts %>%
mutate(phrase_translated = paste(phrase, "\n(", recode(phrase, !!!translation_map), ")"))
phrase_counts
ggplot(phrase_counts, aes(x = reorder(phrase_translated, -count), y = count, fill = count)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradient(low = "lightblue", high = "darkred") +  # Color gradient based on count
labs(
title = "",
x = "Phrase (Turkish & English)",
y = "Count"
) +
theme_minimal()
testdata |> group_by(emotion, rating)|> summarize(n= n())
`summarise()`
library(dplyr)
testdata |> group_by(emotion, rating)|> summarize(n= n())
`summarise()`
library(tidyverse)
testdata |> group_by(emotion, rating)|> summarize(n= n())
`summarise()`
testdata |> group_by(emotion, rating)|> summarize(n= n())
`
testdata |> group_by(emotion, rating)|> summarize(n= n())
testdata_summary <- testdata |>
group_by(emotion, rating) |>
summarize(n = n(), .groups = "drop")  # Prevents grouping warnings
# Create the bar plot
ggplot(testdata_summary, aes(x = factor(rating), y = n, fill = emotion)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodged bars for better comparison
scale_fill_manual(values = c("n" = "red", "p" = "blue")) +  # Negative (red), Positive (blue)
labs(
title = "Emotion Distribution Across Ratings",
x = "Rating",
y = "Count",
fill = "Emotion"
) +
theme_minimal()
testdata_summary <- testdata |>
group_by(emotion, rating) |>
summarize(n = n(), .groups = "drop")  # Prevents grouping warnings
# Create the bar plot
ggplot(testdata_summary, aes(x = factor(rating), y = n, fill = emotion)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodged bars for better comparison
scale_fill_manual(values = c("n" = "darkred", "p" = "lightblue")) +  # Negative (red), Positive (blue)
labs(
title = "Emotion Distribution Across Ratings",
x = "Rating",
y = "Count",
fill = "Emotion"
) +
theme_minimal()
testdata_summary <- testdata |>
group_by(emotion, rating) |>
summarize(n = n(), .groups = "drop")  |>  # Prevents grouping warnings
mutate(emotion = recode(emotion, "n" = "Negative", "p" = "Positive"))  # Relabel categories
# Create the bar plot
ggplot(testdata_summary, aes(x = factor(rating), y = n, fill = emotion)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodged bars for better comparison
scale_fill_manual(values = c("n" = "darkred", "p" = "lightblue")) +  # Negative (red), Positive (blue)
labs(
title = "Emotion Distribution Across Ratings",
x = "Rating",
y = "Count",
fill = "Emotion"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Modify emotion labels for better readability
testdata_summary <- testdata |>
group_by(emotion, rating) |>
summarize(n = n(), .groups = "drop") |>
mutate(emotion = recode(emotion, "n" = "Negative", "p" = "Positive"))  # Relabel categories
# Create the bar plot
ggplot(testdata_summary, aes(x = factor(rating), y = n, fill = emotion)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Negative" = "red", "Positive" = "blue")) +
labs(
title = "Emotion Distribution Across Ratings",
x = "Rating",
y = "Count",
fill = "Emotion"
) +
theme_minimal()
testdata_summary <-
testdata_summary
ggplot(testdata_summary, aes(x = factor(rating), y = n, fill = emotion)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodged bars for better comparison
scale_fill_manual(values = c("Negative" = "red", "Positive" = "blue")) +  # Negative (red), Positive (blue)
labs(
title = "Emotion Distribution Across Ratings",
x = "Rating",
y = "Count",
fill = "Emotion"
) +
theme_minimal()
ggplot(testdata_summary, aes(x = factor(rating), y = n, fill = emotion)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodged bars for better comparison
scale_fill_manual(values = c("Negative" = "darkred", "Positive" = "lightblue")) +  # Negative (red), Positive (blue)
labs(
title = "Emotion Distribution Across Ratings",
x = "Rating",
y = "Count",
fill = "Emotion"
) +
theme_minimal()
View(phrases)
